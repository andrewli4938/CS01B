// NOTE: ALL CLASSES ARE WRITTEN IN SEPARATE FILES

/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: App contains the main method, which initializes Message objects and calls the run() method. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class App
{
    public static void main(String[] args)
    {        
        SmartCarrier sc = new SmartCarrier("San Mateo County"); 
        sc.init();
        sc.run();
    } 
}



public abstract class Item
{
    private int time; 
    private String from, to; 
    private double charge;
   
    public Item()
    {
        time = 1596546448;
        charge = 10; 
        from = "5105555555"; 
        to = "5104444444";
    }
    
    public Item(int time, String from, String to, double charge)
    {
        this.time = time; 
        this.from = from; 
        this.to = to; 
        this.charge = charge; 
    }
    
    public String toString()
    {
        return String.format("Time: %9d,From: %14s,To: %14s,Charge: $%.2f", time, from, to, charge); 
    }
    
    public boolean equals(Object other)
    {
        Item otherItem = (Item) other; 
        return this.time == otherItem.time && this.from.equals(otherItem.from) && this.to.equals(otherItem.to); 
    }
    
    public int getTime()
    {
        return time; 
    }
    
    public double getCharge()
    {
        return charge; 
    }
    
    public String getFrom()
    {
        return from; 
    }
    
    public String getTo()
    {
        return to; 
    }
    
    public void setTime(int time)
    {
        this.time = time; 
    }
    
    public void setCharge(double charge)
    {
        this.charge = charge; 
    }
    
    public void setFrom(String from)
    {
        this.from = from; 
    }
    
    public void setTo(String to)
    {
        this.to = to; 
    }

}


/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: Message class is a generic class that contains a toString() method formatting the general information of each <br>
 * Message and an equals() method that compares the general information of each type of Message. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class Message<T> extends Item
{
    private T chargable;

    public Message()
    {
        super();
        chargable = null;
    }

    public Message(T object, int time, String from, String to, double charge)
    {
        super(time, from, to, charge);
        this.chargable = object;
    }

    public String toString()
    {
        return String.format("%-55s%s", chargable.toString(), super.toString());
    }

    public boolean equals(Object other)
    {
        Message<?> otherMessage = (Message<?>) other;
        
        // comparing if two objects are the same type instead of "instanceof to verify if T is a Voice or Text or Media"
        // to make more generic, to allow additional Message types to be added without modifying the code.
        // i.e if you wanted to add Email
        if (otherMessage.getMessage().getClass().getName().equals(chargable.getClass().getName())) 
        {
            return super.equals(otherMessage) && this.getMessage().equals(otherMessage.getMessage());
        }
        return false;

//        if(chargable instanceof Text && otherMessage.getMessage() instanceof Text)
//        {   
//            otherMessage = (Message<Text>) other;
//            Text otherText = (Text) otherMessage.getMessage();
//            Text text = (Text) this.getMessage();
//            return super.equals(otherMessage) && text.equals(otherText);
//            
//        } else if(chargable instanceof Media && otherMessage.getMessage() instanceof Media)
//        {
//            otherMessage = (Message<Media>) other;
//            Media otherMedia = (Media) otherMessage.getMessage();
//            Media media = (Media) this.getMessage();
//            return super.equals(otherMessage) && media.equals(otherMedia);
//            
//        } else if(chargable instanceof Voice && otherMessage.getMessage() instanceof Voice)
//        {
//            otherMessage = (Message<Voice>) other;
//            Voice otherVoice = (Voice) otherMessage.getMessage();
//            Voice voice = (Voice) this.getMessage();
//            return super.equals(otherMessage) && voice.equals(otherVoice);
//        }
//        return false;

    }

    public T getMessage()
    {
        return chargable;
    }

    public void setMessage(T object)
    {
        this.chargable = object;
    }
}


import java.io.*;
import java.nio.charset.*;
import java.nio.file.*;
import java.util.*;
import java.util.Map.Entry;
/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: SmartCarrier class is where the run() and init() methods are defined. init() method creates new Message <br>
 * types according to the text file it is reading from. run() method asks for the user input which then decides <br>
 * what the program will do next. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class SmartCarrier
{
    private TreeMap<String, ArrayList<Item>> map;
    private String location;

    public SmartCarrier()
    {
        map = new TreeMap<String, ArrayList<Item>>();
        location = "Alameda County";
    }

    public SmartCarrier(String location)
    {
        map = new TreeMap<String, ArrayList<Item>>();
        this.location = location;
    }

    public void init()
    {
        String line;
        String[] data;
        int time;
        String from;
        String to;
        String filePath= "/Users/w.li/eclipse-workspace/CS1B/Assignments/Assignment04/MessageData.txt";

        Path fileLocation = Paths.get(filePath);
        try (BufferedReader br = Files.newBufferedReader(fileLocation, StandardCharsets.UTF_8))
        {
            while ((line = br.readLine()) != null)
            {
                data = line.split(",");
                time = Integer.parseInt(data[1]);
                from = data[2];
                to = data[3];

                if (data[0].equalsIgnoreCase("T"))
                {
                    Text text = new Text(data[4]);
                    Message<Text> message = new Message<Text>(text, time, from, to, text.charge());
                    if (map.containsKey(from))
                    {

                        map.get(from).add(message);
                    } else
                    {
                        map.put(from, new ArrayList<Item>());
                        map.get(from).add(message);
                    }
                } else if (data[0].equalsIgnoreCase("M"))
                {
                    Media media = new Media(Double.parseDouble(data[4]), data[5]);
                    Message<Media> message = new Message<Media>(media, time, from, to, media.charge());
                    if (map.containsKey(from))
                    {
                        map.get(from).add(message);
                    } else
                    {
                        map.put(from, new ArrayList<Item>());
                        map.get(from).add(message);
                    }
                } else if (data[0].equalsIgnoreCase("V"))
                {
                    Voice voice = new Voice(Integer.parseInt(data[4]), data[5]);
                    Message<Voice> message = new Message<Voice>(voice, time, from, to, voice.charge());
                    if (map.containsKey(from))
                    {
                        map.get(from).add(message);
                    } else
                    {
                        map.put(from, new ArrayList<Item>());
                        map.get(from).add(message);
                    }
                }
            }
        } catch (IOException e)
        {
            e.printStackTrace();
        }

    }

    public void run()
    {
        try
        {
            boolean isUsing = true;
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            int userChoice;
            do
            {
                printMenu();
                userChoice = Integer.parseInt(reader.readLine());
                switch (userChoice)
                {
                case 1:
                    listAccounts();
                    break;
                case 2:
                    eraseFirst();
                    break;
                case 3:
                    equalsTest(reader);
                    break;
                case 4:
                    quit(reader);
                    isUsing = false;
                    break;
                default:
                    System.out.println("Please enter a valid menu choice");
                    break;
                }
            } while (isUsing);
        } catch (NumberFormatException n)
        {
            System.out.println("Please enter a valid menu choice");
        } catch (IOException e)
        {
            e.printStackTrace();
        }

    }

    private void equalsTest(BufferedReader reader) throws IOException
    {
        String messageType;
        int messageTime;
        String from;
        String to;
        try
        {
            Message<?> message1 = null;
            Message<?> message2 = null;
            System.out.println("\nEquals test - please enter message specifics\n");
            System.out.println("Message 1:\nMessage type (Text, Voice, Media):");
            messageType = reader.readLine();
            System.out.println("Message time (secs from 1/1/1970):");
            messageTime = Integer.parseInt(reader.readLine());
            System.out.println("Sending number:");
            from = reader.readLine();
            System.out.println("Receiving number:");
            to = reader.readLine();
            if (messageType.equalsIgnoreCase("Text"))
            {
                System.out.println("Text message content");
                String content = reader.readLine();
                Text text = new Text(content);
                message1 = new Message<Text>(text, messageTime, from, to, text.charge());

            } else if (messageType.equalsIgnoreCase("Voice"))
            {
                System.out.println("Voice message duration (secs):");
                String duration = reader.readLine();
                System.out.println("Voice message format:");
                String format = reader.readLine();
                Voice voice = new Voice(Integer.parseInt(duration), format);
                message1 = new Message<Voice>(voice, messageTime, from, to, voice.charge());

            } else if (messageType.equalsIgnoreCase("Media"))
            {
                System.out.println("Media message size (MB)");
                String size = reader.readLine();
                System.out.println("Media message format:");
                String format = reader.readLine();
                Media media = new Media(Double.parseDouble(size), format);
                message1 = new Message<Media>(media, messageTime, from, to, media.charge());
            }
            System.out.println("Message 2:\nMessage type (Text, Voice, Media):");
            messageType = reader.readLine();
            System.out.println("Message time (secs from 1/1/1970):");
            messageTime = Integer.parseInt(reader.readLine());
            System.out.println("Sending number:");
            from = reader.readLine();
            System.out.println("Receiving number:");
            to = reader.readLine();
            if (messageType.equalsIgnoreCase("Text"))
            {
                System.out.println("Text message content");
                String content = reader.readLine();
                Text text = new Text(content);
                message2 = new Message<Text>(text, messageTime, from, to, text.charge());
            } else if (messageType.equalsIgnoreCase("Voice"))
            {
                System.out.println("Voice message duration (secs):");
                String duration = reader.readLine();
                System.out.println("Voice message format:");
                String format = reader.readLine();
                Voice voice = new Voice(Integer.parseInt(duration), format);
                message2 = new Message<Voice>(voice, messageTime, from, to, voice.charge());
            } else if (messageType.equalsIgnoreCase("Media"))
            {
                System.out.println("Media message size (MB)");
                String size = reader.readLine();
                System.out.println("Media message format:");
                String format = reader.readLine();
                Media media = new Media(Double.parseDouble(size), format);

                message2 = new Message<Media>(media, messageTime, from, to, media.charge());
            }

            if (message1 == null || message2 == null)
            {
                System.out.println("Please enter valid Message types");

            } else
            {
                if (message1.equals(message2))
                {
                    System.out.println("Both Messages Are Equal");
                } else
                {
                    System.out.println("The Two Messages Are Not Equal");
                }
            }
        } catch (NumberFormatException e)
        {
            System.out.println("Enter valid Message specifics");
        }
    }

    private void printMenu()
    {
        System.out.println("\nFOOTHILL WIRELESS at " + location + "\nMESSAGE UTILIZATION AND ACCOUNT ADMIN");
        System.out.println("1.) List all accounts");
        System.out.println("2.) Erase the first media message");
        System.out.println("3.) equals test");
        System.out.println("4.) Quit");
    }

    private void quit(BufferedReader reader) throws IOException
    {
        reader.close();
        System.out.println("\t\t\t---END PROGRAM---");
    }

    private void listAccounts()
    {
        String key;
        List<Item> value;
        Item next;
        System.out.println("\nLIST OF ALL ACCOUNTS");
        for (Entry<String, ArrayList<Item>> entry : map.entrySet())
        {
            key = entry.getKey();
            value = entry.getValue();
            double totalCharge = 0;
            System.out.println(key);
            List<Item> mapList = value;
            ListIterator<Item> iterator = mapList.listIterator();
            while (iterator.hasNext())
            {
                next = iterator.next();
                totalCharge += next.getCharge();
                System.out.println(next);
            }
            System.out.format("\t\tCharge:  $%.2f\n", totalCharge);

        }
    }

    private void eraseFirst()
    {
        List<Item> value;
        for (Entry<String, ArrayList<Item>> entry : map.entrySet())
        {
            value = entry.getValue();
            eraseHelper(value);
        }
        System.out.println("Updated Version:");
        listAccounts();
    }

    private void eraseHelper(List<? extends Item> list)
    {
//        for (Item item: list) {
//            if (i instanceof Message<?>) {
//                if(((Message<?>) item).getMessage() instanceof Media){
//                    list.remove(item);
//                    break;
//                }
//            }
//        }

        ListIterator<?> iterator = list.listIterator();
        while (iterator.hasNext())
        {
            Item item = (Item) iterator.next();
            if (item instanceof Message<?>)
            {   
                if (((Message<?>) item).getMessage() instanceof Media)
                {
                    list.remove(item);
                    break;
                }
            }
        }
    }

}


/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: Text class is a type of Chargeable and only contains data that is specific to a text message <br>
 * (text message content). Also contains a toString() and equals() method that formats and compares the content <br>
 * instance field respectively. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class Text implements Chargeable
{
    private String content;

    public Text()
    {
        content = "";
    }

    public Text(String text)
    {
        content = text;
    }

    public String toString()
    {
        return "\tTEXT: " + content;
    }

    public boolean equals(Object object)
    {
        Text otherText = (Text) object; 
        return content.equalsIgnoreCase(otherText.content);
    }

    public double charge()
    {
        return 0.2; 
    }
}


/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: Voice class is a type of Chargeable that only contains data specific to a voice message. <br>
 * Also contains a toString() and equals() method that formats and compares the duration and format instance <br>
 * fields respectively. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class Voice implements Chargeable
{
    private int duration; // in seconds
    private String format;

    public Voice()
    {
        duration = 0;
        format = "";
    }

    public Voice(int duration, String format)
    {
        this.duration = duration;
        this.format = format;
    }

    public String toString()
    {
        return new String("\tVOICE: Duration:" + duration + " (sec), Format: " + format);
    }

    public boolean equals(Object object)
    {
        Voice otherVoice = (Voice) object;
        return duration == otherVoice.duration && format.equalsIgnoreCase(otherVoice.format); 
    }

    public double charge()
    {
        return duration * 0.1; 
    }
}


/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: Media class is a type of Chargeable that only contains data specific to a media message, which is size and <br>
 * format. Also contains a toString() and equals() method that formats and compares the instances fields respectively. <br>
 * <br>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public class Media implements Chargeable
{
    private double size;
    private String format;

    public Media()
    {
        size = 0;
        format = "";
    }

    public Media(double size, String format)
    {
        this.size = size;
        this.format = format;
    }

    public String toString()
    {
        return new String("\tMEDIA: Size:" + size + " MB, Format: " + format);
    }

    public boolean equals(Object object)
    {
        Media otherMedia = (Media) object; 
        return size == otherMedia.size && format.equalsIgnoreCase(otherMedia.format); 
    }

    public double charge()
    {
        return size * 0.5; 
    }
}


/**
 * @version 1.0 8-06-2020
 * @author Andrew Li
 * <br>
 * Purpose: Chargable is an interface that contains only one method - charge(). It is implemented according to the <br>
 * charge rates of whichever class implements it. <b>
 * Revision History: <br>
 * Date: 8-06-2020 <br>
 * Programmer: Andrew Li
 */
public interface Chargeable
{
    double charge(); 
}
